document.addEventListener('DOMContentLoaded', function () {
    // DOM рдПрд▓рд┐рдореЗрдВрдЯреНрд╕ рдХреЛ рдЪреБрдиреЗрдВ
    const editorContainer = document.getElementById('editor-container');
    const terminalOutput = document.getElementById('terminal');
    const runButton = document.getElementById('run-button');
    const saveButton = document.getElementById('save-button');
    const loadButton = document.getElementById('load-button');
    const themeToggleButton = document.getElementById('theme-toggle-button');

    let editor; // Monaco Editor рдЗрдВрд╕реНрдЯреЗрдВрд╕ рдХреЗ рд▓рд┐рдП рд╡реЗрд░рд┐рдПрдмрд▓

    // Monaco Editor рдХреЛ рд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди
    require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs' } });
    require(['vs/editor/editor.main'], function () {
        // рдПрдбрд┐рдЯрд░ рдХреЛ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ
        editor = monaco.editor.create(editorContainer, {
            value: 'print("Hello, Python Web IDE!")\n\nfor i in range(5):\n    print(f"Number: {i}")', // рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдХреЛрдб
            language: 'python',
            theme: 'vs-light', // рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдереАрдо
            automaticLayout: true, // рдХрдВрдЯреЗрдирд░ рд░рд┐рд╕рд╛рдЗрдЬрд╝ рд╣реЛрдиреЗ рдкрд░ рдПрдбрд┐рдЯрд░ рдХреЛ рдПрдбрдЬрд╕реНрдЯ рдХрд░реЗрдВ
            minimap: { enabled: true },
            fontSize: 14,
            scrollBeyondLastLine: false,
        });

        // localStorage рд╕реЗ рд╕реЗрд╡ рдХреА рдЧрдИ рдереАрдо рдХреЛ рд▓реЛрдб рдХрд░реЗрдВ
        loadTheme();
    });

    // рдлрдВрдХреНрд╢рди: рдХреЛрдб рдПрдХреНрд╕реЗрдХреНрдпреВрдЯ рдХрд░реЗрдВ
    async function executeCode() {
        if (!editor) return;

        const code = editor.getValue();
        terminalOutput.innerText = 'Running code...';
        terminalOutput.classList.remove('error');

        try {
            const response = await fetch('/execute', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code: code }),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            // рдЖрдЙрдЯрдкреБрдЯ рдпрд╛ рдПрд░рд░ рдХреЛ рдЯрд░реНрдорд┐рдирд▓ рдореЗрдВ рджрд┐рдЦрд╛рдПрдВ
            if (result.error) {
                terminalOutput.innerText = result.error;
                terminalOutput.classList.add('error');
            } else {
                terminalOutput.innerText = result.output;
            }
        } catch (e) {
            terminalOutput.innerText = `Failed to connect to the server: ${e.message}`;
            terminalOutput.classList.add('error');
        }
    }

    // рдлрдВрдХреНрд╢рди: рдереАрдо рдХреЛ рдЯреЙрдЧрд▓ рдХрд░реЗрдВ (рд▓рд╛рдЗрдЯ/рдбрд╛рд░реНрдХ)
    function toggleTheme() {
        const body = document.body;
        body.classList.toggle('dark-mode');
        
        const isDarkMode = body.classList.contains('dark-mode');
        const newTheme = isDarkMode ? 'vs-dark' : 'vs-light';
        const newIcon = isDarkMode ? 'тШАя╕П' : 'ЁЯМЩ';
        
        // Monaco рдПрдбрд┐рдЯрд░ рдХреА рдереАрдо рдмрджрд▓реЗрдВ
        if (editor) {
            monaco.editor.setTheme(newTheme);
        }
        
        // рдмрдЯрди рдХрд╛ рдЖрдЗрдХрди рдмрджрд▓реЗрдВ
        themeToggleButton.innerText = newIcon;

        // рдереАрдо рдХреЛ localStorage рдореЗрдВ рд╕реЗрд╡ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдкреЗрдЬ рд░реАрд▓реЛрдб рд╣реЛрдиреЗ рдкрд░ рдпрд╛рдж рд░рд╣реЗ
        localStorage.setItem('ide-theme', newTheme);
    }

    // рдлрдВрдХреНрд╢рди: рдкреЗрдЬ рд▓реЛрдб рдкрд░ рдереАрдо рд╕реЗрдЯ рдХрд░реЗрдВ
    function loadTheme() {
        const savedTheme = localStorage.getItem('ide-theme') || 'vs-light';
        if (savedTheme === 'vs-dark') {
            document.body.classList.add('dark-mode');
            themeToggleButton.innerText = 'тШАя╕П';
        } else {
            document.body.classList.remove('dark-mode');
            themeToggleButton.innerText = 'ЁЯМЩ';
        }

        if (editor) {
            monaco.editor.setTheme(savedTheme);
        }
    }

    // рдлрдВрдХреНрд╢рди: рдХреЛрдб рдХреЛ localStorage рдореЗрдВ рд╕реЗрд╡ рдХрд░реЗрдВ
    function saveCode() {
        if (!editor) return;
        const code = editor.getValue();
        localStorage.setItem('python-code-snippet', code);
        alert('Code saved successfully!');
    }

    // рдлрдВрдХреНрд╢рди: localStorage рд╕реЗ рдХреЛрдб рд▓реЛрдб рдХрд░реЗрдВ
    function loadCode() {
        if (!editor) return;
        const savedCode = localStorage.getItem('python-code-snippet');
        if (savedCode) {
            editor.setValue(savedCode);
            alert('Code loaded successfully!');
        } else {
            alert('No saved code found.');
        }
    }

    // рдЗрд╡реЗрдВрдЯ рд▓рд┐рд╕реНрдирд░реНрд╕
    runButton.addEventListener('click', executeCode);
    themeToggleButton.addEventListener('click', toggleTheme);
    saveButton.addEventListener('click', saveCode);
    loadButton.addEventListener('click', loadCode);
    
    // рдХреАрдмреЛрд░реНрдб рд╢реЙрд░реНрдЯрдХрдЯ (Ctrl+Enter or Cmd+Enter) рдХреЛрдб рдЪрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП
    editorContainer.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
            executeCode();
        }
    });

    // Split.js рдХреЛ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдкреИрдирд▓ рд░рд┐рд╕рд╛рдЗрдЬрд╝ рд╣реЛ рд╕рдХреЗрдВ
    Split(['#editor-container', '#output-container'], {
        sizes: [70, 30], // рдкреНрд░рд╛рд░рдВрднрд┐рдХ рд╕рд╛рдЗрдЬрд╝ (70% рдПрдбрд┐рдЯрд░, 30% рдЯрд░реНрдорд┐рдирд▓)
        minSize: 100, // рдиреНрдпреВрдирддрдо рд╕рд╛рдЗрдЬрд╝
        gutterSize: 8,
        cursor: 'col-resize',
        direction: 'horizontal', // рдбреЗрд╕реНрдХрдЯреЙрдк рдкрд░ рд╣реЙрд░рд┐рдЬреЙрдиреНрдЯрд▓ рд╕реНрдкреНрд▓рд┐рдЯ
    });
});
